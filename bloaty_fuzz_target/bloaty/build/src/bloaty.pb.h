// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bloaty.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bloaty_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bloaty_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bloaty_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bloaty_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bloaty_2eproto;
namespace bloaty {
class CustomDataSource;
class CustomDataSourceDefaultTypeInternal;
extern CustomDataSourceDefaultTypeInternal _CustomDataSource_default_instance_;
class Options;
class OptionsDefaultTypeInternal;
extern OptionsDefaultTypeInternal _Options_default_instance_;
class Regex;
class RegexDefaultTypeInternal;
extern RegexDefaultTypeInternal _Regex_default_instance_;
}  // namespace bloaty
PROTOBUF_NAMESPACE_OPEN
template<> ::bloaty::CustomDataSource* Arena::CreateMaybeMessage<::bloaty::CustomDataSource>(Arena*);
template<> ::bloaty::Options* Arena::CreateMaybeMessage<::bloaty::Options>(Arena*);
template<> ::bloaty::Regex* Arena::CreateMaybeMessage<::bloaty::Regex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bloaty {

enum Options_Demangle : int {
  Options_Demangle_DEMANGLE_SHORT = 0,
  Options_Demangle_DEMANGLE_FULL = 1,
  Options_Demangle_DEMANGLE_NONE = 2
};
bool Options_Demangle_IsValid(int value);
constexpr Options_Demangle Options_Demangle_Demangle_MIN = Options_Demangle_DEMANGLE_SHORT;
constexpr Options_Demangle Options_Demangle_Demangle_MAX = Options_Demangle_DEMANGLE_NONE;
constexpr int Options_Demangle_Demangle_ARRAYSIZE = Options_Demangle_Demangle_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Options_Demangle_descriptor();
template<typename T>
inline const std::string& Options_Demangle_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Options_Demangle>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Options_Demangle_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Options_Demangle_descriptor(), enum_t_value);
}
inline bool Options_Demangle_Parse(
    const std::string& name, Options_Demangle* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Options_Demangle>(
    Options_Demangle_descriptor(), name, value);
}
enum Options_SortBy : int {
  Options_SortBy_SORTBY_BOTH = 0,
  Options_SortBy_SORTBY_VMSIZE = 1,
  Options_SortBy_SORTBY_FILESIZE = 2
};
bool Options_SortBy_IsValid(int value);
constexpr Options_SortBy Options_SortBy_SortBy_MIN = Options_SortBy_SORTBY_BOTH;
constexpr Options_SortBy Options_SortBy_SortBy_MAX = Options_SortBy_SORTBY_FILESIZE;
constexpr int Options_SortBy_SortBy_ARRAYSIZE = Options_SortBy_SortBy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Options_SortBy_descriptor();
template<typename T>
inline const std::string& Options_SortBy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Options_SortBy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Options_SortBy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Options_SortBy_descriptor(), enum_t_value);
}
inline bool Options_SortBy_Parse(
    const std::string& name, Options_SortBy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Options_SortBy>(
    Options_SortBy_descriptor(), name, value);
}
// ===================================================================

class Options :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bloaty.Options) */ {
 public:
  Options();
  virtual ~Options();

  Options(const Options& from);
  Options(Options&& from) noexcept
    : Options() {
    *this = ::std::move(from);
  }

  inline Options& operator=(const Options& from) {
    CopyFrom(from);
    return *this;
  }
  inline Options& operator=(Options&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Options& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Options* internal_default_instance() {
    return reinterpret_cast<const Options*>(
               &_Options_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Options& a, Options& b) {
    a.Swap(&b);
  }
  inline void Swap(Options* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Options* New() const final {
    return CreateMaybeMessage<Options>(nullptr);
  }

  Options* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Options>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Options& from);
  void MergeFrom(const Options& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Options* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bloaty.Options";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bloaty_2eproto);
    return ::descriptor_table_bloaty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Options_Demangle Demangle;
  static constexpr Demangle DEMANGLE_SHORT =
    Options_Demangle_DEMANGLE_SHORT;
  static constexpr Demangle DEMANGLE_FULL =
    Options_Demangle_DEMANGLE_FULL;
  static constexpr Demangle DEMANGLE_NONE =
    Options_Demangle_DEMANGLE_NONE;
  static inline bool Demangle_IsValid(int value) {
    return Options_Demangle_IsValid(value);
  }
  static constexpr Demangle Demangle_MIN =
    Options_Demangle_Demangle_MIN;
  static constexpr Demangle Demangle_MAX =
    Options_Demangle_Demangle_MAX;
  static constexpr int Demangle_ARRAYSIZE =
    Options_Demangle_Demangle_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Demangle_descriptor() {
    return Options_Demangle_descriptor();
  }
  template<typename T>
  static inline const std::string& Demangle_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Demangle>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Demangle_Name.");
    return Options_Demangle_Name(enum_t_value);
  }
  static inline bool Demangle_Parse(const std::string& name,
      Demangle* value) {
    return Options_Demangle_Parse(name, value);
  }

  typedef Options_SortBy SortBy;
  static constexpr SortBy SORTBY_BOTH =
    Options_SortBy_SORTBY_BOTH;
  static constexpr SortBy SORTBY_VMSIZE =
    Options_SortBy_SORTBY_VMSIZE;
  static constexpr SortBy SORTBY_FILESIZE =
    Options_SortBy_SORTBY_FILESIZE;
  static inline bool SortBy_IsValid(int value) {
    return Options_SortBy_IsValid(value);
  }
  static constexpr SortBy SortBy_MIN =
    Options_SortBy_SortBy_MIN;
  static constexpr SortBy SortBy_MAX =
    Options_SortBy_SortBy_MAX;
  static constexpr int SortBy_ARRAYSIZE =
    Options_SortBy_SortBy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SortBy_descriptor() {
    return Options_SortBy_descriptor();
  }
  template<typename T>
  static inline const std::string& SortBy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SortBy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SortBy_Name.");
    return Options_SortBy_Name(enum_t_value);
  }
  static inline bool SortBy_Parse(const std::string& name,
      SortBy* value) {
    return Options_SortBy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kBaseFilenameFieldNumber = 2,
    kDataSourceFieldNumber = 3,
    kCustomDataSourceFieldNumber = 8,
    kDebugFilenameFieldNumber = 10,
    kDisassembleFunctionFieldNumber = 9,
    kSourceFilterFieldNumber = 13,
    kDemangleFieldNumber = 5,
    kSortByFieldNumber = 6,
    kVerboseLevelFieldNumber = 7,
    kDumpRawMapFieldNumber = 14,
    kDebugVmaddrFieldNumber = 11,
    kDebugFileoffFieldNumber = 12,
    kMaxRowsPerLevelFieldNumber = 4,
  };
  // repeated string filename = 1;
  int filename_size() const;
  private:
  int _internal_filename_size() const;
  public:
  void clear_filename();
  const std::string& filename(int index) const;
  std::string* mutable_filename(int index);
  void set_filename(int index, const std::string& value);
  void set_filename(int index, std::string&& value);
  void set_filename(int index, const char* value);
  void set_filename(int index, const char* value, size_t size);
  std::string* add_filename();
  void add_filename(const std::string& value);
  void add_filename(std::string&& value);
  void add_filename(const char* value);
  void add_filename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filename();
  private:
  const std::string& _internal_filename(int index) const;
  std::string* _internal_add_filename();
  public:

  // repeated string base_filename = 2;
  int base_filename_size() const;
  private:
  int _internal_base_filename_size() const;
  public:
  void clear_base_filename();
  const std::string& base_filename(int index) const;
  std::string* mutable_base_filename(int index);
  void set_base_filename(int index, const std::string& value);
  void set_base_filename(int index, std::string&& value);
  void set_base_filename(int index, const char* value);
  void set_base_filename(int index, const char* value, size_t size);
  std::string* add_base_filename();
  void add_base_filename(const std::string& value);
  void add_base_filename(std::string&& value);
  void add_base_filename(const char* value);
  void add_base_filename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& base_filename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_base_filename();
  private:
  const std::string& _internal_base_filename(int index) const;
  std::string* _internal_add_base_filename();
  public:

  // repeated string data_source = 3;
  int data_source_size() const;
  private:
  int _internal_data_source_size() const;
  public:
  void clear_data_source();
  const std::string& data_source(int index) const;
  std::string* mutable_data_source(int index);
  void set_data_source(int index, const std::string& value);
  void set_data_source(int index, std::string&& value);
  void set_data_source(int index, const char* value);
  void set_data_source(int index, const char* value, size_t size);
  std::string* add_data_source();
  void add_data_source(const std::string& value);
  void add_data_source(std::string&& value);
  void add_data_source(const char* value);
  void add_data_source(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_source() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_source();
  private:
  const std::string& _internal_data_source(int index) const;
  std::string* _internal_add_data_source();
  public:

  // repeated .bloaty.CustomDataSource custom_data_source = 8;
  int custom_data_source_size() const;
  private:
  int _internal_custom_data_source_size() const;
  public:
  void clear_custom_data_source();
  ::bloaty::CustomDataSource* mutable_custom_data_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::CustomDataSource >*
      mutable_custom_data_source();
  private:
  const ::bloaty::CustomDataSource& _internal_custom_data_source(int index) const;
  ::bloaty::CustomDataSource* _internal_add_custom_data_source();
  public:
  const ::bloaty::CustomDataSource& custom_data_source(int index) const;
  ::bloaty::CustomDataSource* add_custom_data_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::CustomDataSource >&
      custom_data_source() const;

  // repeated string debug_filename = 10;
  int debug_filename_size() const;
  private:
  int _internal_debug_filename_size() const;
  public:
  void clear_debug_filename();
  const std::string& debug_filename(int index) const;
  std::string* mutable_debug_filename(int index);
  void set_debug_filename(int index, const std::string& value);
  void set_debug_filename(int index, std::string&& value);
  void set_debug_filename(int index, const char* value);
  void set_debug_filename(int index, const char* value, size_t size);
  std::string* add_debug_filename();
  void add_debug_filename(const std::string& value);
  void add_debug_filename(std::string&& value);
  void add_debug_filename(const char* value);
  void add_debug_filename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& debug_filename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_debug_filename();
  private:
  const std::string& _internal_debug_filename(int index) const;
  std::string* _internal_add_debug_filename();
  public:

  // optional string disassemble_function = 9;
  bool has_disassemble_function() const;
  private:
  bool _internal_has_disassemble_function() const;
  public:
  void clear_disassemble_function();
  const std::string& disassemble_function() const;
  void set_disassemble_function(const std::string& value);
  void set_disassemble_function(std::string&& value);
  void set_disassemble_function(const char* value);
  void set_disassemble_function(const char* value, size_t size);
  std::string* mutable_disassemble_function();
  std::string* release_disassemble_function();
  void set_allocated_disassemble_function(std::string* disassemble_function);
  private:
  const std::string& _internal_disassemble_function() const;
  void _internal_set_disassemble_function(const std::string& value);
  std::string* _internal_mutable_disassemble_function();
  public:

  // optional string source_filter = 13;
  bool has_source_filter() const;
  private:
  bool _internal_has_source_filter() const;
  public:
  void clear_source_filter();
  const std::string& source_filter() const;
  void set_source_filter(const std::string& value);
  void set_source_filter(std::string&& value);
  void set_source_filter(const char* value);
  void set_source_filter(const char* value, size_t size);
  std::string* mutable_source_filter();
  std::string* release_source_filter();
  void set_allocated_source_filter(std::string* source_filter);
  private:
  const std::string& _internal_source_filter() const;
  void _internal_set_source_filter(const std::string& value);
  std::string* _internal_mutable_source_filter();
  public:

  // optional .bloaty.Options.Demangle demangle = 5 [default = DEMANGLE_SHORT];
  bool has_demangle() const;
  private:
  bool _internal_has_demangle() const;
  public:
  void clear_demangle();
  ::bloaty::Options_Demangle demangle() const;
  void set_demangle(::bloaty::Options_Demangle value);
  private:
  ::bloaty::Options_Demangle _internal_demangle() const;
  void _internal_set_demangle(::bloaty::Options_Demangle value);
  public:

  // optional .bloaty.Options.SortBy sort_by = 6 [default = SORTBY_BOTH];
  bool has_sort_by() const;
  private:
  bool _internal_has_sort_by() const;
  public:
  void clear_sort_by();
  ::bloaty::Options_SortBy sort_by() const;
  void set_sort_by(::bloaty::Options_SortBy value);
  private:
  ::bloaty::Options_SortBy _internal_sort_by() const;
  void _internal_set_sort_by(::bloaty::Options_SortBy value);
  public:

  // optional int32 verbose_level = 7;
  bool has_verbose_level() const;
  private:
  bool _internal_has_verbose_level() const;
  public:
  void clear_verbose_level();
  ::PROTOBUF_NAMESPACE_ID::int32 verbose_level() const;
  void set_verbose_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_verbose_level() const;
  void _internal_set_verbose_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool dump_raw_map = 14;
  bool has_dump_raw_map() const;
  private:
  bool _internal_has_dump_raw_map() const;
  public:
  void clear_dump_raw_map();
  bool dump_raw_map() const;
  void set_dump_raw_map(bool value);
  private:
  bool _internal_dump_raw_map() const;
  void _internal_set_dump_raw_map(bool value);
  public:

  // optional uint64 debug_vmaddr = 11;
  bool has_debug_vmaddr() const;
  private:
  bool _internal_has_debug_vmaddr() const;
  public:
  void clear_debug_vmaddr();
  ::PROTOBUF_NAMESPACE_ID::uint64 debug_vmaddr() const;
  void set_debug_vmaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_debug_vmaddr() const;
  void _internal_set_debug_vmaddr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 debug_fileoff = 12;
  bool has_debug_fileoff() const;
  private:
  bool _internal_has_debug_fileoff() const;
  public:
  void clear_debug_fileoff();
  ::PROTOBUF_NAMESPACE_ID::uint64 debug_fileoff() const;
  void set_debug_fileoff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_debug_fileoff() const;
  void _internal_set_debug_fileoff(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int64 max_rows_per_level = 4 [default = 20];
  bool has_max_rows_per_level() const;
  private:
  bool _internal_has_max_rows_per_level() const;
  public:
  void clear_max_rows_per_level();
  ::PROTOBUF_NAMESPACE_ID::int64 max_rows_per_level() const;
  void set_max_rows_per_level(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_rows_per_level() const;
  void _internal_set_max_rows_per_level(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bloaty.Options)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filename_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> base_filename_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_source_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::CustomDataSource > custom_data_source_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> debug_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr disassemble_function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_filter_;
  int demangle_;
  int sort_by_;
  ::PROTOBUF_NAMESPACE_ID::int32 verbose_level_;
  bool dump_raw_map_;
  ::PROTOBUF_NAMESPACE_ID::uint64 debug_vmaddr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 debug_fileoff_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_rows_per_level_;
  friend struct ::TableStruct_bloaty_2eproto;
};
// -------------------------------------------------------------------

class CustomDataSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bloaty.CustomDataSource) */ {
 public:
  CustomDataSource();
  virtual ~CustomDataSource();

  CustomDataSource(const CustomDataSource& from);
  CustomDataSource(CustomDataSource&& from) noexcept
    : CustomDataSource() {
    *this = ::std::move(from);
  }

  inline CustomDataSource& operator=(const CustomDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomDataSource& operator=(CustomDataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomDataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomDataSource* internal_default_instance() {
    return reinterpret_cast<const CustomDataSource*>(
               &_CustomDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CustomDataSource& a, CustomDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomDataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomDataSource* New() const final {
    return CreateMaybeMessage<CustomDataSource>(nullptr);
  }

  CustomDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomDataSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomDataSource& from);
  void MergeFrom(const CustomDataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomDataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bloaty.CustomDataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bloaty_2eproto);
    return ::descriptor_table_bloaty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewriteFieldNumber = 3,
    kNameFieldNumber = 1,
    kBaseDataSourceFieldNumber = 2,
  };
  // repeated .bloaty.Regex rewrite = 3;
  int rewrite_size() const;
  private:
  int _internal_rewrite_size() const;
  public:
  void clear_rewrite();
  ::bloaty::Regex* mutable_rewrite(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::Regex >*
      mutable_rewrite();
  private:
  const ::bloaty::Regex& _internal_rewrite(int index) const;
  ::bloaty::Regex* _internal_add_rewrite();
  public:
  const ::bloaty::Regex& rewrite(int index) const;
  ::bloaty::Regex* add_rewrite();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::Regex >&
      rewrite() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string base_data_source = 2;
  bool has_base_data_source() const;
  private:
  bool _internal_has_base_data_source() const;
  public:
  void clear_base_data_source();
  const std::string& base_data_source() const;
  void set_base_data_source(const std::string& value);
  void set_base_data_source(std::string&& value);
  void set_base_data_source(const char* value);
  void set_base_data_source(const char* value, size_t size);
  std::string* mutable_base_data_source();
  std::string* release_base_data_source();
  void set_allocated_base_data_source(std::string* base_data_source);
  private:
  const std::string& _internal_base_data_source() const;
  void _internal_set_base_data_source(const std::string& value);
  std::string* _internal_mutable_base_data_source();
  public:

  // @@protoc_insertion_point(class_scope:bloaty.CustomDataSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::Regex > rewrite_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_data_source_;
  friend struct ::TableStruct_bloaty_2eproto;
};
// -------------------------------------------------------------------

class Regex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bloaty.Regex) */ {
 public:
  Regex();
  virtual ~Regex();

  Regex(const Regex& from);
  Regex(Regex&& from) noexcept
    : Regex() {
    *this = ::std::move(from);
  }

  inline Regex& operator=(const Regex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Regex& operator=(Regex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Regex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Regex* internal_default_instance() {
    return reinterpret_cast<const Regex*>(
               &_Regex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Regex& a, Regex& b) {
    a.Swap(&b);
  }
  inline void Swap(Regex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Regex* New() const final {
    return CreateMaybeMessage<Regex>(nullptr);
  }

  Regex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Regex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Regex& from);
  void MergeFrom(const Regex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Regex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bloaty.Regex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bloaty_2eproto);
    return ::descriptor_table_bloaty_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 1,
    kReplacementFieldNumber = 2,
  };
  // optional string pattern = 1;
  bool has_pattern() const;
  private:
  bool _internal_has_pattern() const;
  public:
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);
  private:
  const std::string& _internal_pattern() const;
  void _internal_set_pattern(const std::string& value);
  std::string* _internal_mutable_pattern();
  public:

  // optional string replacement = 2;
  bool has_replacement() const;
  private:
  bool _internal_has_replacement() const;
  public:
  void clear_replacement();
  const std::string& replacement() const;
  void set_replacement(const std::string& value);
  void set_replacement(std::string&& value);
  void set_replacement(const char* value);
  void set_replacement(const char* value, size_t size);
  std::string* mutable_replacement();
  std::string* release_replacement();
  void set_allocated_replacement(std::string* replacement);
  private:
  const std::string& _internal_replacement() const;
  void _internal_set_replacement(const std::string& value);
  std::string* _internal_mutable_replacement();
  public:

  // @@protoc_insertion_point(class_scope:bloaty.Regex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replacement_;
  friend struct ::TableStruct_bloaty_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Options

// repeated string filename = 1;
inline int Options::_internal_filename_size() const {
  return filename_.size();
}
inline int Options::filename_size() const {
  return _internal_filename_size();
}
inline void Options::clear_filename() {
  filename_.Clear();
}
inline std::string* Options::add_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.filename)
  return _internal_add_filename();
}
inline const std::string& Options::_internal_filename(int index) const {
  return filename_.Get(index);
}
inline const std::string& Options::filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.filename)
  return _internal_filename(index);
}
inline std::string* Options::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.filename)
  return filename_.Mutable(index);
}
inline void Options::set_filename(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.filename)
  filename_.Mutable(index)->assign(value);
}
inline void Options::set_filename(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.filename)
  filename_.Mutable(index)->assign(std::move(value));
}
inline void Options::set_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.filename)
}
inline void Options::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.filename)
}
inline std::string* Options::_internal_add_filename() {
  return filename_.Add();
}
inline void Options::add_filename(const std::string& value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.filename)
}
inline void Options::add_filename(std::string&& value) {
  filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.filename)
}
inline void Options::add_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.filename)
}
inline void Options::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.filename)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Options::filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.filename)
  return filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Options::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.filename)
  return &filename_;
}

// repeated string base_filename = 2;
inline int Options::_internal_base_filename_size() const {
  return base_filename_.size();
}
inline int Options::base_filename_size() const {
  return _internal_base_filename_size();
}
inline void Options::clear_base_filename() {
  base_filename_.Clear();
}
inline std::string* Options::add_base_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.base_filename)
  return _internal_add_base_filename();
}
inline const std::string& Options::_internal_base_filename(int index) const {
  return base_filename_.Get(index);
}
inline const std::string& Options::base_filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.base_filename)
  return _internal_base_filename(index);
}
inline std::string* Options::mutable_base_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.base_filename)
  return base_filename_.Mutable(index);
}
inline void Options::set_base_filename(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.base_filename)
  base_filename_.Mutable(index)->assign(value);
}
inline void Options::set_base_filename(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.base_filename)
  base_filename_.Mutable(index)->assign(std::move(value));
}
inline void Options::set_base_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.base_filename)
}
inline void Options::set_base_filename(int index, const char* value, size_t size) {
  base_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.base_filename)
}
inline std::string* Options::_internal_add_base_filename() {
  return base_filename_.Add();
}
inline void Options::add_base_filename(const std::string& value) {
  base_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.base_filename)
}
inline void Options::add_base_filename(std::string&& value) {
  base_filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.base_filename)
}
inline void Options::add_base_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  base_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.base_filename)
}
inline void Options::add_base_filename(const char* value, size_t size) {
  base_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.base_filename)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Options::base_filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.base_filename)
  return base_filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Options::mutable_base_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.base_filename)
  return &base_filename_;
}

// repeated string debug_filename = 10;
inline int Options::_internal_debug_filename_size() const {
  return debug_filename_.size();
}
inline int Options::debug_filename_size() const {
  return _internal_debug_filename_size();
}
inline void Options::clear_debug_filename() {
  debug_filename_.Clear();
}
inline std::string* Options::add_debug_filename() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.debug_filename)
  return _internal_add_debug_filename();
}
inline const std::string& Options::_internal_debug_filename(int index) const {
  return debug_filename_.Get(index);
}
inline const std::string& Options::debug_filename(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_filename)
  return _internal_debug_filename(index);
}
inline std::string* Options::mutable_debug_filename(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.debug_filename)
  return debug_filename_.Mutable(index);
}
inline void Options::set_debug_filename(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_filename)
  debug_filename_.Mutable(index)->assign(value);
}
inline void Options::set_debug_filename(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_filename)
  debug_filename_.Mutable(index)->assign(std::move(value));
}
inline void Options::set_debug_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.debug_filename)
}
inline void Options::set_debug_filename(int index, const char* value, size_t size) {
  debug_filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.debug_filename)
}
inline std::string* Options::_internal_add_debug_filename() {
  return debug_filename_.Add();
}
inline void Options::add_debug_filename(const std::string& value) {
  debug_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.debug_filename)
}
inline void Options::add_debug_filename(std::string&& value) {
  debug_filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.debug_filename)
}
inline void Options::add_debug_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  debug_filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.debug_filename)
}
inline void Options::add_debug_filename(const char* value, size_t size) {
  debug_filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.debug_filename)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Options::debug_filename() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.debug_filename)
  return debug_filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Options::mutable_debug_filename() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.debug_filename)
  return &debug_filename_;
}

// repeated string data_source = 3;
inline int Options::_internal_data_source_size() const {
  return data_source_.size();
}
inline int Options::data_source_size() const {
  return _internal_data_source_size();
}
inline void Options::clear_data_source() {
  data_source_.Clear();
}
inline std::string* Options::add_data_source() {
  // @@protoc_insertion_point(field_add_mutable:bloaty.Options.data_source)
  return _internal_add_data_source();
}
inline const std::string& Options::_internal_data_source(int index) const {
  return data_source_.Get(index);
}
inline const std::string& Options::data_source(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.data_source)
  return _internal_data_source(index);
}
inline std::string* Options::mutable_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.data_source)
  return data_source_.Mutable(index);
}
inline void Options::set_data_source(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.data_source)
  data_source_.Mutable(index)->assign(value);
}
inline void Options::set_data_source(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bloaty.Options.data_source)
  data_source_.Mutable(index)->assign(std::move(value));
}
inline void Options::set_data_source(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_source_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bloaty.Options.data_source)
}
inline void Options::set_data_source(int index, const char* value, size_t size) {
  data_source_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.data_source)
}
inline std::string* Options::_internal_add_data_source() {
  return data_source_.Add();
}
inline void Options::add_data_source(const std::string& value) {
  data_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bloaty.Options.data_source)
}
inline void Options::add_data_source(std::string&& value) {
  data_source_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bloaty.Options.data_source)
}
inline void Options::add_data_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_source_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bloaty.Options.data_source)
}
inline void Options::add_data_source(const char* value, size_t size) {
  data_source_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bloaty.Options.data_source)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Options::data_source() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.data_source)
  return data_source_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Options::mutable_data_source() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.data_source)
  return &data_source_;
}

// optional int64 max_rows_per_level = 4 [default = 20];
inline bool Options::_internal_has_max_rows_per_level() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Options::has_max_rows_per_level() const {
  return _internal_has_max_rows_per_level();
}
inline void Options::clear_max_rows_per_level() {
  max_rows_per_level_ = PROTOBUF_LONGLONG(20);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Options::_internal_max_rows_per_level() const {
  return max_rows_per_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Options::max_rows_per_level() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.max_rows_per_level)
  return _internal_max_rows_per_level();
}
inline void Options::_internal_set_max_rows_per_level(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  max_rows_per_level_ = value;
}
inline void Options::set_max_rows_per_level(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_rows_per_level(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.max_rows_per_level)
}

// optional .bloaty.Options.Demangle demangle = 5 [default = DEMANGLE_SHORT];
inline bool Options::_internal_has_demangle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Options::has_demangle() const {
  return _internal_has_demangle();
}
inline void Options::clear_demangle() {
  demangle_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::bloaty::Options_Demangle Options::_internal_demangle() const {
  return static_cast< ::bloaty::Options_Demangle >(demangle_);
}
inline ::bloaty::Options_Demangle Options::demangle() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.demangle)
  return _internal_demangle();
}
inline void Options::_internal_set_demangle(::bloaty::Options_Demangle value) {
  assert(::bloaty::Options_Demangle_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  demangle_ = value;
}
inline void Options::set_demangle(::bloaty::Options_Demangle value) {
  _internal_set_demangle(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.demangle)
}

// optional .bloaty.Options.SortBy sort_by = 6 [default = SORTBY_BOTH];
inline bool Options::_internal_has_sort_by() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Options::has_sort_by() const {
  return _internal_has_sort_by();
}
inline void Options::clear_sort_by() {
  sort_by_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::bloaty::Options_SortBy Options::_internal_sort_by() const {
  return static_cast< ::bloaty::Options_SortBy >(sort_by_);
}
inline ::bloaty::Options_SortBy Options::sort_by() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.sort_by)
  return _internal_sort_by();
}
inline void Options::_internal_set_sort_by(::bloaty::Options_SortBy value) {
  assert(::bloaty::Options_SortBy_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  sort_by_ = value;
}
inline void Options::set_sort_by(::bloaty::Options_SortBy value) {
  _internal_set_sort_by(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.sort_by)
}

// optional int32 verbose_level = 7;
inline bool Options::_internal_has_verbose_level() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Options::has_verbose_level() const {
  return _internal_has_verbose_level();
}
inline void Options::clear_verbose_level() {
  verbose_level_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Options::_internal_verbose_level() const {
  return verbose_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Options::verbose_level() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.verbose_level)
  return _internal_verbose_level();
}
inline void Options::_internal_set_verbose_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  verbose_level_ = value;
}
inline void Options::set_verbose_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_verbose_level(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.verbose_level)
}

// optional uint64 debug_vmaddr = 11;
inline bool Options::_internal_has_debug_vmaddr() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Options::has_debug_vmaddr() const {
  return _internal_has_debug_vmaddr();
}
inline void Options::clear_debug_vmaddr() {
  debug_vmaddr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Options::_internal_debug_vmaddr() const {
  return debug_vmaddr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Options::debug_vmaddr() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_vmaddr)
  return _internal_debug_vmaddr();
}
inline void Options::_internal_set_debug_vmaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  debug_vmaddr_ = value;
}
inline void Options::set_debug_vmaddr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_debug_vmaddr(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_vmaddr)
}

// optional uint64 debug_fileoff = 12;
inline bool Options::_internal_has_debug_fileoff() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Options::has_debug_fileoff() const {
  return _internal_has_debug_fileoff();
}
inline void Options::clear_debug_fileoff() {
  debug_fileoff_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Options::_internal_debug_fileoff() const {
  return debug_fileoff_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Options::debug_fileoff() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.debug_fileoff)
  return _internal_debug_fileoff();
}
inline void Options::_internal_set_debug_fileoff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  debug_fileoff_ = value;
}
inline void Options::set_debug_fileoff(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_debug_fileoff(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.debug_fileoff)
}

// repeated .bloaty.CustomDataSource custom_data_source = 8;
inline int Options::_internal_custom_data_source_size() const {
  return custom_data_source_.size();
}
inline int Options::custom_data_source_size() const {
  return _internal_custom_data_source_size();
}
inline void Options::clear_custom_data_source() {
  custom_data_source_.Clear();
}
inline ::bloaty::CustomDataSource* Options::mutable_custom_data_source(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.custom_data_source)
  return custom_data_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::CustomDataSource >*
Options::mutable_custom_data_source() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.Options.custom_data_source)
  return &custom_data_source_;
}
inline const ::bloaty::CustomDataSource& Options::_internal_custom_data_source(int index) const {
  return custom_data_source_.Get(index);
}
inline const ::bloaty::CustomDataSource& Options::custom_data_source(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.Options.custom_data_source)
  return _internal_custom_data_source(index);
}
inline ::bloaty::CustomDataSource* Options::_internal_add_custom_data_source() {
  return custom_data_source_.Add();
}
inline ::bloaty::CustomDataSource* Options::add_custom_data_source() {
  // @@protoc_insertion_point(field_add:bloaty.Options.custom_data_source)
  return _internal_add_custom_data_source();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::CustomDataSource >&
Options::custom_data_source() const {
  // @@protoc_insertion_point(field_list:bloaty.Options.custom_data_source)
  return custom_data_source_;
}

// optional string disassemble_function = 9;
inline bool Options::_internal_has_disassemble_function() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Options::has_disassemble_function() const {
  return _internal_has_disassemble_function();
}
inline void Options::clear_disassemble_function() {
  disassemble_function_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Options::disassemble_function() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.disassemble_function)
  return _internal_disassemble_function();
}
inline void Options::set_disassemble_function(const std::string& value) {
  _internal_set_disassemble_function(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.disassemble_function)
}
inline std::string* Options::mutable_disassemble_function() {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.disassemble_function)
  return _internal_mutable_disassemble_function();
}
inline const std::string& Options::_internal_disassemble_function() const {
  return disassemble_function_.GetNoArena();
}
inline void Options::_internal_set_disassemble_function(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  disassemble_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Options::set_disassemble_function(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  disassemble_function_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Options.disassemble_function)
}
inline void Options::set_disassemble_function(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  disassemble_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Options.disassemble_function)
}
inline void Options::set_disassemble_function(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  disassemble_function_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.disassemble_function)
}
inline std::string* Options::_internal_mutable_disassemble_function() {
  _has_bits_[0] |= 0x00000001u;
  return disassemble_function_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Options::release_disassemble_function() {
  // @@protoc_insertion_point(field_release:bloaty.Options.disassemble_function)
  if (!has_disassemble_function()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return disassemble_function_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Options::set_allocated_disassemble_function(std::string* disassemble_function) {
  if (disassemble_function != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  disassemble_function_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), disassemble_function);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Options.disassemble_function)
}

// optional string source_filter = 13;
inline bool Options::_internal_has_source_filter() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Options::has_source_filter() const {
  return _internal_has_source_filter();
}
inline void Options::clear_source_filter() {
  source_filter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Options::source_filter() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.source_filter)
  return _internal_source_filter();
}
inline void Options::set_source_filter(const std::string& value) {
  _internal_set_source_filter(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.source_filter)
}
inline std::string* Options::mutable_source_filter() {
  // @@protoc_insertion_point(field_mutable:bloaty.Options.source_filter)
  return _internal_mutable_source_filter();
}
inline const std::string& Options::_internal_source_filter() const {
  return source_filter_.GetNoArena();
}
inline void Options::_internal_set_source_filter(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  source_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Options::set_source_filter(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  source_filter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Options.source_filter)
}
inline void Options::set_source_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  source_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Options.source_filter)
}
inline void Options::set_source_filter(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  source_filter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Options.source_filter)
}
inline std::string* Options::_internal_mutable_source_filter() {
  _has_bits_[0] |= 0x00000002u;
  return source_filter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Options::release_source_filter() {
  // @@protoc_insertion_point(field_release:bloaty.Options.source_filter)
  if (!has_source_filter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return source_filter_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Options::set_allocated_source_filter(std::string* source_filter) {
  if (source_filter != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  source_filter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_filter);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Options.source_filter)
}

// optional bool dump_raw_map = 14;
inline bool Options::_internal_has_dump_raw_map() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Options::has_dump_raw_map() const {
  return _internal_has_dump_raw_map();
}
inline void Options::clear_dump_raw_map() {
  dump_raw_map_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool Options::_internal_dump_raw_map() const {
  return dump_raw_map_;
}
inline bool Options::dump_raw_map() const {
  // @@protoc_insertion_point(field_get:bloaty.Options.dump_raw_map)
  return _internal_dump_raw_map();
}
inline void Options::_internal_set_dump_raw_map(bool value) {
  _has_bits_[0] |= 0x00000020u;
  dump_raw_map_ = value;
}
inline void Options::set_dump_raw_map(bool value) {
  _internal_set_dump_raw_map(value);
  // @@protoc_insertion_point(field_set:bloaty.Options.dump_raw_map)
}

// -------------------------------------------------------------------

// CustomDataSource

// optional string name = 1;
inline bool CustomDataSource::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomDataSource::has_name() const {
  return _internal_has_name();
}
inline void CustomDataSource::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomDataSource::name() const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.name)
  return _internal_name();
}
inline void CustomDataSource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bloaty.CustomDataSource.name)
}
inline std::string* CustomDataSource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.name)
  return _internal_mutable_name();
}
inline const std::string& CustomDataSource::_internal_name() const {
  return name_.GetNoArena();
}
inline void CustomDataSource::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CustomDataSource::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.CustomDataSource.name)
}
inline void CustomDataSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.CustomDataSource.name)
}
inline void CustomDataSource::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.CustomDataSource.name)
}
inline std::string* CustomDataSource::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomDataSource::release_name() {
  // @@protoc_insertion_point(field_release:bloaty.CustomDataSource.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDataSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bloaty.CustomDataSource.name)
}

// optional string base_data_source = 2;
inline bool CustomDataSource::_internal_has_base_data_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomDataSource::has_base_data_source() const {
  return _internal_has_base_data_source();
}
inline void CustomDataSource::clear_base_data_source() {
  base_data_source_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomDataSource::base_data_source() const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.base_data_source)
  return _internal_base_data_source();
}
inline void CustomDataSource::set_base_data_source(const std::string& value) {
  _internal_set_base_data_source(value);
  // @@protoc_insertion_point(field_set:bloaty.CustomDataSource.base_data_source)
}
inline std::string* CustomDataSource::mutable_base_data_source() {
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.base_data_source)
  return _internal_mutable_base_data_source();
}
inline const std::string& CustomDataSource::_internal_base_data_source() const {
  return base_data_source_.GetNoArena();
}
inline void CustomDataSource::_internal_set_base_data_source(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  base_data_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CustomDataSource::set_base_data_source(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  base_data_source_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.CustomDataSource.base_data_source)
}
inline void CustomDataSource::set_base_data_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  base_data_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.CustomDataSource.base_data_source)
}
inline void CustomDataSource::set_base_data_source(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  base_data_source_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.CustomDataSource.base_data_source)
}
inline std::string* CustomDataSource::_internal_mutable_base_data_source() {
  _has_bits_[0] |= 0x00000002u;
  return base_data_source_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomDataSource::release_base_data_source() {
  // @@protoc_insertion_point(field_release:bloaty.CustomDataSource.base_data_source)
  if (!has_base_data_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return base_data_source_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomDataSource::set_allocated_base_data_source(std::string* base_data_source) {
  if (base_data_source != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  base_data_source_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_data_source);
  // @@protoc_insertion_point(field_set_allocated:bloaty.CustomDataSource.base_data_source)
}

// repeated .bloaty.Regex rewrite = 3;
inline int CustomDataSource::_internal_rewrite_size() const {
  return rewrite_.size();
}
inline int CustomDataSource::rewrite_size() const {
  return _internal_rewrite_size();
}
inline void CustomDataSource::clear_rewrite() {
  rewrite_.Clear();
}
inline ::bloaty::Regex* CustomDataSource::mutable_rewrite(int index) {
  // @@protoc_insertion_point(field_mutable:bloaty.CustomDataSource.rewrite)
  return rewrite_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::Regex >*
CustomDataSource::mutable_rewrite() {
  // @@protoc_insertion_point(field_mutable_list:bloaty.CustomDataSource.rewrite)
  return &rewrite_;
}
inline const ::bloaty::Regex& CustomDataSource::_internal_rewrite(int index) const {
  return rewrite_.Get(index);
}
inline const ::bloaty::Regex& CustomDataSource::rewrite(int index) const {
  // @@protoc_insertion_point(field_get:bloaty.CustomDataSource.rewrite)
  return _internal_rewrite(index);
}
inline ::bloaty::Regex* CustomDataSource::_internal_add_rewrite() {
  return rewrite_.Add();
}
inline ::bloaty::Regex* CustomDataSource::add_rewrite() {
  // @@protoc_insertion_point(field_add:bloaty.CustomDataSource.rewrite)
  return _internal_add_rewrite();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bloaty::Regex >&
CustomDataSource::rewrite() const {
  // @@protoc_insertion_point(field_list:bloaty.CustomDataSource.rewrite)
  return rewrite_;
}

// -------------------------------------------------------------------

// Regex

// optional string pattern = 1;
inline bool Regex::_internal_has_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Regex::has_pattern() const {
  return _internal_has_pattern();
}
inline void Regex::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Regex::pattern() const {
  // @@protoc_insertion_point(field_get:bloaty.Regex.pattern)
  return _internal_pattern();
}
inline void Regex::set_pattern(const std::string& value) {
  _internal_set_pattern(value);
  // @@protoc_insertion_point(field_set:bloaty.Regex.pattern)
}
inline std::string* Regex::mutable_pattern() {
  // @@protoc_insertion_point(field_mutable:bloaty.Regex.pattern)
  return _internal_mutable_pattern();
}
inline const std::string& Regex::_internal_pattern() const {
  return pattern_.GetNoArena();
}
inline void Regex::_internal_set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Regex::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Regex.pattern)
}
inline void Regex::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Regex.pattern)
}
inline void Regex::set_pattern(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Regex.pattern)
}
inline std::string* Regex::_internal_mutable_pattern() {
  _has_bits_[0] |= 0x00000001u;
  return pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Regex::release_pattern() {
  // @@protoc_insertion_point(field_release:bloaty.Regex.pattern)
  if (!has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pattern_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Regex::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Regex.pattern)
}

// optional string replacement = 2;
inline bool Regex::_internal_has_replacement() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Regex::has_replacement() const {
  return _internal_has_replacement();
}
inline void Regex::clear_replacement() {
  replacement_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Regex::replacement() const {
  // @@protoc_insertion_point(field_get:bloaty.Regex.replacement)
  return _internal_replacement();
}
inline void Regex::set_replacement(const std::string& value) {
  _internal_set_replacement(value);
  // @@protoc_insertion_point(field_set:bloaty.Regex.replacement)
}
inline std::string* Regex::mutable_replacement() {
  // @@protoc_insertion_point(field_mutable:bloaty.Regex.replacement)
  return _internal_mutable_replacement();
}
inline const std::string& Regex::_internal_replacement() const {
  return replacement_.GetNoArena();
}
inline void Regex::_internal_set_replacement(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  replacement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Regex::set_replacement(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  replacement_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bloaty.Regex.replacement)
}
inline void Regex::set_replacement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  replacement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bloaty.Regex.replacement)
}
inline void Regex::set_replacement(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  replacement_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bloaty.Regex.replacement)
}
inline std::string* Regex::_internal_mutable_replacement() {
  _has_bits_[0] |= 0x00000002u;
  return replacement_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Regex::release_replacement() {
  // @@protoc_insertion_point(field_release:bloaty.Regex.replacement)
  if (!has_replacement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return replacement_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Regex::set_allocated_replacement(std::string* replacement) {
  if (replacement != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  replacement_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replacement);
  // @@protoc_insertion_point(field_set_allocated:bloaty.Regex.replacement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bloaty

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bloaty::Options_Demangle> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bloaty::Options_Demangle>() {
  return ::bloaty::Options_Demangle_descriptor();
}
template <> struct is_proto_enum< ::bloaty::Options_SortBy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bloaty::Options_SortBy>() {
  return ::bloaty::Options_SortBy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bloaty_2eproto
